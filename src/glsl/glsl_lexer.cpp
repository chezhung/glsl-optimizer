#line 1 "src/glsl/glsl_lexer.cpp"

#line 3 "src/glsl/glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define _mesa_glsl_lexer__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer _mesa_glsl_lexer__create_buffer
#endif

#ifdef yy_delete_buffer
#define _mesa_glsl_lexer__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer _mesa_glsl_lexer__delete_buffer
#endif

#ifdef yy_scan_buffer
#define _mesa_glsl_lexer__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer _mesa_glsl_lexer__scan_buffer
#endif

#ifdef yy_scan_string
#define _mesa_glsl_lexer__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string _mesa_glsl_lexer__scan_string
#endif

#ifdef yy_scan_bytes
#define _mesa_glsl_lexer__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes _mesa_glsl_lexer__scan_bytes
#endif

#ifdef yy_init_buffer
#define _mesa_glsl_lexer__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer _mesa_glsl_lexer__init_buffer
#endif

#ifdef yy_flush_buffer
#define _mesa_glsl_lexer__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer _mesa_glsl_lexer__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define _mesa_glsl_lexer__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state _mesa_glsl_lexer__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define _mesa_glsl_lexer__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer _mesa_glsl_lexer__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define _mesa_glsl_lexer_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state _mesa_glsl_lexer_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define _mesa_glsl_lexer_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state _mesa_glsl_lexer_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define _mesa_glsl_lexer_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack _mesa_glsl_lexer_ensure_buffer_stack
#endif

#ifdef yylex
#define _mesa_glsl_lexer_lex_ALREADY_DEFINED
#else
#define yylex _mesa_glsl_lexer_lex
#endif

#ifdef yyrestart
#define _mesa_glsl_lexer_restart_ALREADY_DEFINED
#else
#define yyrestart _mesa_glsl_lexer_restart
#endif

#ifdef yylex_init
#define _mesa_glsl_lexer_lex_init_ALREADY_DEFINED
#else
#define yylex_init _mesa_glsl_lexer_lex_init
#endif

#ifdef yylex_init_extra
#define _mesa_glsl_lexer_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra _mesa_glsl_lexer_lex_init_extra
#endif

#ifdef yylex_destroy
#define _mesa_glsl_lexer_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy _mesa_glsl_lexer_lex_destroy
#endif

#ifdef yyget_debug
#define _mesa_glsl_lexer_get_debug_ALREADY_DEFINED
#else
#define yyget_debug _mesa_glsl_lexer_get_debug
#endif

#ifdef yyset_debug
#define _mesa_glsl_lexer_set_debug_ALREADY_DEFINED
#else
#define yyset_debug _mesa_glsl_lexer_set_debug
#endif

#ifdef yyget_extra
#define _mesa_glsl_lexer_get_extra_ALREADY_DEFINED
#else
#define yyget_extra _mesa_glsl_lexer_get_extra
#endif

#ifdef yyset_extra
#define _mesa_glsl_lexer_set_extra_ALREADY_DEFINED
#else
#define yyset_extra _mesa_glsl_lexer_set_extra
#endif

#ifdef yyget_in
#define _mesa_glsl_lexer_get_in_ALREADY_DEFINED
#else
#define yyget_in _mesa_glsl_lexer_get_in
#endif

#ifdef yyset_in
#define _mesa_glsl_lexer_set_in_ALREADY_DEFINED
#else
#define yyset_in _mesa_glsl_lexer_set_in
#endif

#ifdef yyget_out
#define _mesa_glsl_lexer_get_out_ALREADY_DEFINED
#else
#define yyget_out _mesa_glsl_lexer_get_out
#endif

#ifdef yyset_out
#define _mesa_glsl_lexer_set_out_ALREADY_DEFINED
#else
#define yyset_out _mesa_glsl_lexer_set_out
#endif

#ifdef yyget_leng
#define _mesa_glsl_lexer_get_leng_ALREADY_DEFINED
#else
#define yyget_leng _mesa_glsl_lexer_get_leng
#endif

#ifdef yyget_text
#define _mesa_glsl_lexer_get_text_ALREADY_DEFINED
#else
#define yyget_text _mesa_glsl_lexer_get_text
#endif

#ifdef yyget_lineno
#define _mesa_glsl_lexer_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno _mesa_glsl_lexer_get_lineno
#endif

#ifdef yyset_lineno
#define _mesa_glsl_lexer_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno _mesa_glsl_lexer_set_lineno
#endif

#ifdef yyget_column
#define _mesa_glsl_lexer_get_column_ALREADY_DEFINED
#else
#define yyget_column _mesa_glsl_lexer_get_column
#endif

#ifdef yyset_column
#define _mesa_glsl_lexer_set_column_ALREADY_DEFINED
#else
#define yyset_column _mesa_glsl_lexer_set_column
#endif

#ifdef yywrap
#define _mesa_glsl_lexer_wrap_ALREADY_DEFINED
#else
#define yywrap _mesa_glsl_lexer_wrap
#endif

#ifdef yyget_lval
#define _mesa_glsl_lexer_get_lval_ALREADY_DEFINED
#else
#define yyget_lval _mesa_glsl_lexer_get_lval
#endif

#ifdef yyset_lval
#define _mesa_glsl_lexer_set_lval_ALREADY_DEFINED
#else
#define yyset_lval _mesa_glsl_lexer_set_lval
#endif

#ifdef yyget_lloc
#define _mesa_glsl_lexer_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc _mesa_glsl_lexer_get_lloc
#endif

#ifdef yyset_lloc
#define _mesa_glsl_lexer_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc _mesa_glsl_lexer_set_lloc
#endif

#ifdef yyalloc
#define _mesa_glsl_lexer_alloc_ALREADY_DEFINED
#else
#define yyalloc _mesa_glsl_lexer_alloc
#endif

#ifdef yyrealloc
#define _mesa_glsl_lexer_realloc_ALREADY_DEFINED
#else
#define yyrealloc _mesa_glsl_lexer_realloc
#endif

#ifdef yyfree
#define _mesa_glsl_lexer_free_ALREADY_DEFINED
#else
#define yyfree _mesa_glsl_lexer_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_lexer_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 249
#define YY_END_OF_BUFFER 250
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1014] =
    {   0,
        0,    0,   16,   16,    0,    0,  250,  248,    1,   22,
      248,  248,  248,  248,  248,  248,  248,  248,  177,  175,
      248,  248,  248,  247,  248,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  248,    1,  248,   21,   16,
       20,   21,   19,   17,   18,   14,   13,    1,  159,  168,
      160,  171,  165,  154,  167,  155,  174,  179,  166,  180,
      177,    0,    0,  182,  177,    0,  175,  175,  163,  156,
      158,  157,  164,  247,  172,  162,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,   31,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,   35,  247,  247,   62,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  173,  161,    1,    0,    0,    2,    0,    0,    0,
        0,   16,   15,   19,   18,    0,  179,  178,    0,  180,
        0,  181,  176,  169,  170,  247,  185,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,   34,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,   27,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,   63,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        0,    0,    0,    0,   15,    0,  179,    0,  178,    0,
      180,  181,  176,  247,  247,  247,   25,  247,  247,  247,
      231,  224,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,   33,  188,  247,  247,  247,  247,   70,  247,

      247,  193,  206,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  203,  227,   50,   51,   52,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  191,  183,  247,  247,   28,
      247,  247,  247,  247,  247,  247,  247,   47,   48,   49,
      152,  247,  247,  247,    0,    0,    0,    0,    0,  178,
      247,  247,  247,   29,  247,   38,   39,   40,  247,  186,
      247,  247,   24,  247,  247,  247,  247,  214,  215,  216,
      247,  184,  247,  207,   26,  217,  218,  219,  229,  211,

      212,  213,  247,  247,  247,   64,  209,  247,  247,  247,
       41,   42,   43,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  244,  247,  247,  247,  247,  247,
      247,  247,  247,  204,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  187,  247,  247,  226,   44,
       45,   46,  247,  247,   32,  247,    0,    0,    0,    0,
      234,  247,  247,   65,  247,  247,  232,  247,  247,  247,
      205,  200,  237,  247,  247,  247,  247,  247,  247,  196,
      247,  247,  247,  153,   53,   54,   55,   56,   57,   58,
       59,   60,   61,  247,  247,  247,  247,  210,  192,  247,

      247,  198,  247,  247,  247,   37,  247,  245,  223,   71,
      199,  151,  247,  235,  194,  247,  247,  247,  247,  247,
      247,  247,  247,  247,    0,    0,    0,    0,  247,  247,
      247,  247,  247,  195,   36,  247,  247,  247,  247,  247,
      247,  108,  109,  110,  247,  247,  247,  247,  247,  228,
      247,  247,  247,  247,  107,  247,  247,  247,  247,  247,
      247,  247,  247,  189,  247,  247,  247,  247,  247,   66,
      247,  247,   67,  247,  247,    0,    0,    0,    0,    0,
      247,  247,   68,  145,   30,  201,  119,  120,  121,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  197,  247,  247,  247,  148,  243,  147,
      247,  247,  247,  247,  247,  247,  247,  247,  190,  130,
      131,  132,  247,  247,  208,  247,  146,  247,    0,    0,
        6,    0,    0,    0,   12,    3,  247,   23,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  117,  247,  247,
      247,  112,  202,   69,  247,  247,  247,  247,  247,  225,
      247,  233,  230,  238,   73,   74,   75,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  149,    0,    0,    0,    0,    0,    0,    0,
      247,  247,  247,  128,  247,  247,  123,  247,  247,  247,

      247,  247,  247,  247,  247,   84,   85,   86,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  246,  247,  247,  139,  247,  247,  134,   90,   91,
       92,  247,  247,    4,    0,    5,    0,    0,    0,    0,
        0,    0,  150,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  111,  247,  113,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,   96,  247,  247,
      247,  247,   76,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,    0,    0,    0,    0,
      247,  247,  247,  122,  124,  247,  114,  247,  115,  247,

      247,  247,  247,  247,   97,  247,  247,   87,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  133,  135,  247,  247,  247,   98,  247,
      247,   93,    0,    0,    0,  125,  126,  247,  247,  247,
      141,  247,  247,  142,  247,  247,  247,  247,  247,  247,
      247,   72,  247,  247,  247,  247,  220,  247,  221,  236,
      247,  247,  247,  136,  137,  247,  247,  247,  247,  247,
      247,  247,  247,    0,    0,    0,  247,  247,  247,  247,
      118,  116,  247,  247,  247,  239,  241,  247,   77,  247,
       78,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  240,  242,  247,    0,    0,    0,    0,  129,
      127,  247,  247,   88,   89,  247,  247,  247,   79,  247,
      247,  247,   80,  247,  247,  247,  140,  138,   94,   95,
      247,  247,    0,    0,    0,    0,  247,  247,  247,  247,
      247,  247,   99,  247,  102,  247,  247,  247,  247,    0,
        0,    0,    0,  247,  247,  100,  103,  247,  247,  247,
      247,   81,  247,  101,  104,    0,    0,    0,    7,    0,
        0,  143,  144,  247,  247,  247,  247,  106,    0,    0,
        8,    0,    0,  247,  247,  222,  247,    0,    0,    0,
       82,   83,  247,    0,    0,    0,    9,  247,    0,    0,

       10,  105,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   21,   21,   22,   22,   23,    1,   24,
       25,   26,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   34,   34,   34,   35,   36,   34,   37,   34,
       34,   38,   39,   40,   41,   34,   34,   42,   34,   34,
        1,    1,    1,   43,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   34,   61,   62,   63,   64,   65,   66,   67,
       68,   69,    1,   70,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    4,    4,    4,    4,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    5,    4,    4,    4,    4,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1024] =
    {   0,
        0,   69,   75,  145, 1383, 1382, 1384, 1387,   70, 1387,
     1358, 1357,   94, 1356,   91,   92,   90, 1355,  202,  256,
       89, 1354,   95,    0,   79,   68,   64,  127,  125,   68,
      136, 1319,  132,  141,   82,   87,  128, 1313,  148,   84,
      183,  177,  149,  151,  152,  109,  136,  251, 1387,  135,
     1387, 1361,  239, 1387,    0, 1387, 1387,  178, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387,  231, 1387,  233,
      163,  307,  273, 1387, 1387,    0,    0, 1387, 1350, 1387,
     1387, 1387, 1349,    0, 1387, 1387, 1310, 1315,  168, 1312,
     1321, 1319, 1319, 1305, 1308, 1320,  244, 1314, 1301, 1298,

     1312, 1298, 1295, 1295, 1301,  181,  180, 1295, 1306, 1291,
     1297, 1301, 1302,    0, 1293, 1304,  254, 1303, 1298, 1278,
      184, 1282, 1296, 1286,  255, 1279,  271, 1292, 1294,  285,
     1273, 1281, 1278, 1267, 1276,  223,  252, 1281, 1276, 1279,
     1267, 1270,  246,  155,  226, 1280, 1267, 1280,  280, 1273,
     1272, 1387, 1387,  338,  343,  349, 1387, 1257, 1270, 1261,
     1272,  333,    0,  342,    0,  353, 1387,  318,  364, 1387,
      399,  406,  258, 1387, 1387, 1267,    0, 1262, 1257, 1261,
     1271, 1265, 1267,  292, 1250, 1250, 1262, 1253,  291, 1264,
     1261, 1261, 1259, 1256, 1247, 1254, 1240, 1238, 1251, 1236,

     1253,    0, 1250, 1237, 1245, 1242, 1246, 1247, 1240, 1237,
     1225, 1224, 1238, 1241, 1228, 1237, 1224, 1231, 1221,  369,
     1227, 1230, 1220, 1228, 1216, 1220, 1211, 1226, 1225, 1215,
     1222,  331, 1205, 1224, 1207, 1205, 1216, 1205, 1200, 1198,
     1200, 1211, 1196, 1198, 1195, 1207, 1206, 1209, 1190,  182,
     1199, 1194, 1192, 1202, 1180,  377, 1199, 1201, 1189, 1181,
     1180, 1184, 1196, 1179,    0,  413,  423,  441, 1387,  430,
      448, 1387, 1387, 1174, 1185, 1184,    0, 1181, 1186,  382,
        0,    0, 1173, 1171, 1171, 1172, 1167, 1176, 1164, 1182,
     1170,  392,    0,    0, 1164, 1175, 1174, 1174,    0, 1158,

      456,    0,    0, 1160,  459, 1168, 1169, 1159, 1153, 1152,
     1153, 1152, 1152,  463, 1147,    0,    0, 1143, 1142, 1141,
     1143, 1144, 1149, 1143, 1139, 1153, 1148, 1148, 1146, 1145,
     1138, 1132, 1134, 1133, 1136, 1136, 1128, 1131, 1126, 1135,
     1140, 1127, 1124, 1137, 1127,    0,    0, 1134, 1130,    0,
     1121, 1121, 1127, 1117, 1125,  466, 1122,    0,    0,    0,
        0, 1111, 1124, 1123, 1122, 1121, 1118, 1106,  471,  483,
     1118, 1119, 1119,    0, 1103,    0,    0,    0, 1104,    0,
     1113, 1103,    0, 1102, 1103, 1097, 1108,    0,    0,    0,
     1098,    0, 1094,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1105,  478, 1104,    0,    0, 1102, 1098, 1094,
        0,    0,    0, 1086,  490,  493,  498, 1091, 1087, 1093,
     1083, 1081, 1095, 1079,    0, 1079, 1093, 1081, 1077, 1084,
     1078, 1090, 1085,    0, 1083, 1080, 1084, 1067, 1065, 1068,
     1075, 1081, 1076, 1075, 1062,    0, 1064, 1065,    0,    0,
        0,    0, 1062, 1066,    0, 1059, 1059, 1114, 1058, 1061,
        0, 1069, 1048,    0, 1058, 1052,    0, 1045, 1045, 1059,
        0, 1061,    0,  502, 1075, 1074, 1073, 1038, 1037,    0,
     1055, 1054, 1049,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1037, 1051, 1037, 1034,    0,    0, 1040,

      473,    0, 1036, 1044, 1043,    0, 1035, 1027,    0,    0,
        0,    0, 1024,    0,    0, 1023, 1035,  506, 1027, 1034,
     1033, 1030, 1024, 1021, 1016,  525, 1032, 1017, 1011, 1011,
     1025, 1009, 1022,    0,    0, 1014, 1039, 1038, 1037, 1002,
     1001,  304,  501,    0, 1014, 1017, 1015, 1003,  999,    0,
     1012, 1009, 1008,  997,    0,  996,  986, 1004,  989,  992,
      531,  997, 1000,    0, 1018, 1017, 1016,  981,  980,    0,
      995,  981,    0,  992,  984,  986,  549,  555, 1036,  979,
      983,  986,    0,    0,    0,    0, 1007,  551,    0,  983,
      986,  970,  978,  968,  989,  978,  974,  975,  975,  974,

      959,  564,  972,    0,  973,  961,  960,    0,    0,    0,
      956,  986,  985,  984,  949,  948,  944,  952,    0,  982,
      552,    0,  958,  961,    0,  567,    0,  938,  946,  601,
     1387,  608,    0,  628,  595, 1387,  946,    0,  942,  941,
      962,  951,  949,  949,  936,  951,  934,  967,  946,  947,
      942,  963,    0,    0,  959,  958,  957,  922,  921,    0,
      921,    0,    0,    0,  352,  624,  945,  932,  935,  917,
      930,  917,  916,  937,  926,  924,  924,  942,  941,  940,
      905,  904,    0,  909,  650,  656,  404,  926,  916,  904,
      900,  901,  900,  933,  912,  909,  930,  911,  907,  909,

      892,  889,  903,  889,  888,  921,  571,    0,  897,  900,
      892,  883,  891,  881,  902,  891,  887,  889,  887,  887,
      886,    0,  873,  872,  905,  884,  881,  902,  901,  652,
        0,  877,  880, 1387,  434, 1387,  678,    0,  684,  895,
      878,  860,    0,  877,  876,  859,  856,  857,  856,  841,
      828,  818,  824,    0,  825,    0,  822,  821,  820,  841,
      830,  827,  827,  810,  813,  828,  811,  844,  823,  824,
      821,  818,  567,  804,  819,  818,  801,  796,  797,  796,
      795,   12,  105,  126,  217,  260,  469,  345,  329,  351,
      345,  426,  453,    0,    0,  468,  493,  470,  499,  508,

      488,  510,  495,  500,  536,  517,  531,  572,  551,  556,
      554,  560,  547,  549,  565,  551,  554,  571,  581,  577,
      568,  569,  577,    0,    0,  578,  579,  580,  615,  608,
      607,  630,  626,  613,  608,    0,    0,  637,  638,  632,
        0,  633,  621,    0,  623,  648,  662,  647,  646,  649,
      650,    0,  644,  654,  646,  654,  677,  659,    0,    0,
      658,  675,  676,    0,    0,  677,  678,  679,  680,  665,
      664,  667,  668,  728,  729,  679,  665,  666,  690,  691,
        0,    0,  669,  671,  679,    0,    0,  680,  703,  677,
      705,  700,  694,  681,  703,  701,  694,  683,  684,  685,

      686,  694,    0,    0,  695,  755,  756,  757,  691,    0,
        0,  713,  714,    0,    0,  718,  719,  714,    0,  715,
      700,  724,    0,  702,  712,  735,    0,    0,    0,    0,
      728,  729,  717,  774,  727,  729,  720,  721,  713,  714,
      738,  739,    0,  738,  748,  722,  758,  722,  723,  727,
      743,  792,  794,  729,  731,    0,    0,  750,  751,  741,
      749,    0,  765,    0,    0,  760,  804,  805, 1387,  808,
      807,    0,    0,  752,  753,  747,  773,    0,  758,  818,
     1387,  819,  772,  757,  758,    0,  777,  773,  777,  827,
        0,    0,  772,  787,  832,  833, 1387,  770,  780,  837,

     1387,    0,  777,  839,  842,  843,  844,  793,  794,  850,
      851, 1387, 1387,  889,  894,  897,  900,  851,  852,  903,
      907,  910,  912
    } ;

static const flex_int16_t yy_def[1024] =
    {   0,
     1013,    1, 1014, 1014, 1015, 1015, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1016, 1013, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1017, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1018, 1013, 1019,
       19, 1013, 1013, 1013, 1013, 1020,   20, 1013, 1013, 1013,
     1013, 1013, 1013, 1016, 1013, 1013, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1021, 1013, 1017, 1013, 1013, 1019, 1013, 1013,
     1013, 1013, 1020, 1013, 1013, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1013, 1013, 1013, 1013, 1021, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1013, 1013, 1013, 1013, 1013, 1013,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1013, 1013, 1013, 1013,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1013, 1013, 1013, 1013, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1013, 1013, 1013, 1013, 1013,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1013, 1013,
     1013, 1013, 1022, 1013, 1013, 1013, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1013, 1013, 1013, 1022, 1013, 1013, 1013,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1013, 1013, 1013, 1013, 1023, 1013, 1013,
     1013, 1013, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1023, 1013, 1013, 1013,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1013, 1013, 1013, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1013, 1013, 1013, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1013, 1013, 1013, 1013, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1013, 1013, 1013, 1013, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1013,
     1013, 1013, 1013, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1013, 1013, 1013, 1013, 1013,
     1013, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1013, 1013,
     1013, 1013, 1013, 1016, 1016, 1016, 1016, 1013, 1013, 1013,
     1016, 1016, 1016, 1013, 1013, 1013, 1013, 1016, 1013, 1013,

     1013, 1016, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013,    0, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013
    } ;

static const flex_int16_t yy_nxt[1458] =
    {   0,
        8,    9,   10,    9,   11,    8,   12,   13,    8,    8,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   20,
       20,   20,    8,   21,   22,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   25,   24,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   24,   24,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   24,   24,   24,   46,
       47,   58,  828,   58,   48,   49,   50,   51,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       49,   53,   53,   53,   53,   53,   53,   54,   49,   49,

       49,   61,   64,   85,   66,   68,   68,   68,   68,   68,
       68,   68,   79,   80,   87,   65,   67,   49,   62,   82,
       83,   86,   90,  102,   91,  103,  120,   92,   93,   88,
       89,  122,  130,  152,  104,  123,  162,  154,  162,   58,
      121,  155,  131,  829,   49,   49,   50,   51,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       49,   53,   53,   53,   53,   53,   53,   54,   49,   49,
       49,   94,  124,   98,  830,   95,  111,   99,  153,   58,
      105,   58,   96,  100,  112,   97,  125,   49,  106,  101,
      114,  107,  127,  115,  108,  147,  113,  116,  117,  148,

      109,  143,  118,  150, 1013,  119,  144,  250,  128,  149,
      145,  129,  151,  146,   49,   70,  251,   71,   71,   71,
       71,   71,   71,   72,  200,  139,  178,  132,  140, 1013,
      179,  351,   73,   74,  133,  134,  198,  141,  201,  135,
      352,  218,   75,   76,  142,  136,  137,  199,  138,  219,
       73,   74,  156,  157,  164,  164,  164,  164,  164,  164,
      164,  166,  167,  169,  170,   75,  831,  239,   76,   70,
      252,   77,   77,   77,   77,   77,   77,   77,  253,  166,
      167,  169,  170,  240,  171,  171,   73,   74,  172,  172,
      172,  172,  172,  172,  172,  187,   78,  241,  273,  158,

      188,  189,  248,  249,   73,   74,  159,  223,  832,  210,
      160,  242,  211,  212,  224,  161,  213,  226,  214,   78,
       70,  273,   72,   72,   72,   72,   72,   72,   72,  231,
      592,  227,  257,  228,  162,  258,  162,   73,   74,  154,
      281,   58,  593,  155,  156,  157,  232,  233,  268,  269,
      156,  157,  287,  288,  282,   73,   74,  164,  164,  164,
      164,  164,  164,  164,  266,  266,  268,  269,  267,  267,
      267,  267,  267,  267,  267,  270,  270,  833,  712,  271,
      271,  271,  271,  271,  271,  271,  318,  319,  320,  332,
      713,  158,  834,  333,  358,  359,  360,  158,  159,  376,

      377,  378,  160,  835,  159,  630,  631,  161,  160,  388,
      389,  390,  836,  161,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  267,  267,
      267,  267,  267,  267,  267,  735,  736,  272,  267,  267,
      267,  267,  267,  267,  267,  271,  271,  271,  271,  271,
      271,  271,  369,  369,  167,  272,  370,  370,  370,  370,
      370,  370,  370,  271,  271,  271,  271,  271,  271,  271,
      735,  736,  167,  396,  397,  398,  400,  401,  402,  170,
      411,  412,  413,  450,  451,  452,  370,  370,  370,  370,
      370,  370,  370,  837,  475,  476,  477,  170,  370,  370,

      370,  370,  370,  370,  370,  478,  479,  485,  486,  487,
      488,  489,  490,  838,  269,  491,  492,  493,  537,  538,
      539,  555,  565,  566,  567,  556,  526,  594,  839,  540,
      541,  840,  269,  568,  569,  841,  595,  842,  596,  597,
      577,  578,  578,  578,  578,  578,  578,  612,  613,  614,
      630,  631,  843,  844,  845,  846,  630,  631,  615,  616,
      847,  617,  848,  849,  632,  632,  632,  632,  632,  632,
      634,  634,  634,  634,  634,  634,  634,  640,  673,  850,
      655,  656,  657,  678,  679,  680,  641,  674,  642,  675,
      633,  658,  659,  818,  681,  682,  635,  759,  851,  852,

      853,  854,  630,  631,  855,  819,  760,  856,  761,  630,
      631,  857,  858,  859,  860,  633,  685,  686,  686,  686,
      686,  686,  686,  632,  632,  632,  632,  632,  632,  630,
      631,  861,  862,  688,  863,  864,  865,  866,  867,  868,
      869,  870,  689,  634,  634,  634,  634,  634,  634,  634,
      714,  735,  736,  690,  871,  872,  873,  735,  736,  715,
      874,  716,  717,  875,  876,  737,  737,  737,  737,  737,
      737,  739,  739,  739,  739,  739,  739,  739,  782,  735,
      736,  877,  878,  879,  880,  735,  736,  783,  881,  784,
      882,  738,  883,  737,  737,  737,  737,  737,  737,  739,

      739,  739,  739,  739,  739,  739,  884,  885,  886,  887,
      888,  889,  890,  891,  892,  893,  738,  894,  895,  896,
      897,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      907,  909,  910,  911,  912,  913,  914,  908,  915,  916,
      917,  918,  919,  920,  921,  922,  923,  924,  925,  926,
      927,  928,  929,  930,  931,  932,  906,  907,  934,  936,
      937,  938,  939,  940,  908,  941,  942,  943,  944,  945,
      946,  947,  948,  949,  950,  934,  951,  953,  954,  955,
      956,  957,  958,  959,  952,  960,  961,  962,  963,  964,
      965,  966,  967,  968,  972,  970,  973,  974,  975,  976,

      977,  969,  971,  978,  979,  980,  968,  933,  982,  970,
      984,  985,  986,  981,  969,  935,  971,  987,  988,  980,
      982,  989,  991,  992,  993,  994,  995,  981,  996,  990,
      998,  999,  935, 1000,  996, 1002,  997, 1003, 1000, 1004,
     1005, 1001,  997, 1005, 1007, 1007, 1001, 1006, 1009, 1010,
     1006, 1011, 1011,   68,  168,  827,  826,  825,  824, 1012,
     1012,  823,  822,  821,  820,  983,  817,  816,  815,  814,
      813,  812,  811,  810,  809,  808,  807,  983,  806,  805,
      804,  803,  802,  801,  800,  799,  798, 1008, 1008,   55,
       55,   55,   55,   55,   56,   56,   56,   56,   56,   84,

       84,   84,  165,  165,  165,  173,  173,  265,  797,  265,
      265,  265,  687,  687,  787,  787,  796,  795,  794,  793,
      792,  791,  790,  789,  788,  786,  785,  781,  780,  779,
      778,  777,  776,  775,  774,  773,  772,  771,  770,  769,
      768,  767,  766,  765,  764,  763,  762,  758,  757,  756,
      755,  754,  753,  752,  751,  750,  749,  748,  747,  746,
      745,  744,  743,  742,  741,  740,  734,  733,  732,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  711,  710,  709,  708,  707,  706,  705,
      704,  703,  702,  701,  700,  699,  698,  697,  696,  695,

      694,  693,  692,  691,  684,  683,  677,  676,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  663,  662,  661,
      660,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  639,  638,  637,  636,  635,  629,  628,
      627,  626,  625,  624,  623,  622,  621,  620,  619,  618,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  576,  575,  574,
      573,  572,  571,  570,  564,  563,  562,  561,  560,  559,
      558,  557,  554,  553,  552,  551,  550,  549,  548,  547,

      546,  545,  544,  543,  542,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  484,  483,
      482,  481,  480,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,

      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  410,  409,  408,  407,  406,  405,  404,  403,  399,
      395,  394,  393,  392,  391,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  375,  374,  373,  372,  371,  368,
      367,  366,  365,  364,  363,  362,  361,  357,  356,  355,
      354,  353,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,

      297,  296,  295,  294,  293,  292,  291,  290,  289,  286,
      285,  284,  283,  280,  279,  278,  277,  276,  275,  274,
      264,  263,  262,  261,  260,  259,  256,  255,  254,  247,
      246,  245,  244,  243,  238,  237,  236,  235,  234,  230,
      229,  225,  222,  221,  220,  217,  216,  215,  209,  208,
      207,  206,  205,  204,  203,  202,  197,  196,  195,  194,
      193,  192,  191,  190,  186,  185,  184,  183,  182,  181,
      180,  177,  176,  175,  174,  163,  126,  110,   81,   69,
       63,   60,   59, 1013,   57,   57,    7, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013
    } ;

static const flex_int16_t yy_chk[1458] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    9,  782,    9,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,   13,   15,   25,   16,   17,   17,   17,   17,   17,
       17,   17,   21,   21,   26,   15,   16,    3,   13,   23,
       23,   25,   27,   30,   27,   30,   35,   27,   27,   26,
       26,   36,   40,   46,   30,   36,   50,   47,   50,   47,
       35,   47,   40,  783,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   28,   37,   29,  784,   28,   33,   29,   46,   58,
       31,   58,   28,   29,   33,   28,   37,    4,   31,   29,
       34,   31,   39,   34,   31,   44,   33,   34,   34,   44,

       31,   43,   34,   45,   71,   34,   43,  144,   39,   44,
       43,   39,   45,   43,    4,   19,  144,   19,   19,   19,
       19,   19,   19,   19,  107,   42,   89,   41,   42,   71,
       89,  250,   19,   19,   41,   41,  106,   42,  107,   41,
      250,  121,   19,   19,   42,   41,   41,  106,   41,  121,
       19,   19,   48,   48,   53,   53,   53,   53,   53,   53,
       53,   68,   68,   70,   70,   19,  785,  136,   19,   20,
      145,   20,   20,   20,   20,   20,   20,   20,  145,   68,
       68,   70,   70,  136,   73,   73,   20,   20,   73,   73,
       73,   73,   73,   73,   73,   97,   20,  137,  173,   48,

       97,   97,  143,  143,   20,   20,   48,  125,  786,  117,
       48,  137,  117,  117,  125,   48,  117,  127,  117,   20,
       72,  173,   72,   72,   72,   72,   72,   72,   72,  130,
      542,  127,  149,  127,  162,  149,  162,   72,   72,  154,
      184,  154,  542,  154,  155,  155,  130,  130,  168,  168,
      156,  156,  189,  189,  184,   72,   72,  164,  164,  164,
      164,  164,  164,  164,  166,  166,  168,  168,  166,  166,
      166,  166,  166,  166,  166,  169,  169,  788,  665,  169,
      169,  169,  169,  169,  169,  169,  220,  220,  220,  232,
      665,  155,  789,  232,  256,  256,  256,  156,  155,  280,

      280,  280,  155,  790,  156,  687,  687,  155,  156,  292,
      292,  292,  791,  156,  171,  171,  171,  171,  171,  171,
      171,  172,  172,  172,  172,  172,  172,  172,  266,  266,
      266,  266,  266,  266,  266,  735,  735,  172,  267,  267,
      267,  267,  267,  267,  267,  270,  270,  270,  270,  270,
      270,  270,  268,  268,  267,  172,  268,  268,  268,  268,
      268,  268,  268,  271,  271,  271,  271,  271,  271,  271,
      787,  787,  267,  301,  301,  301,  305,  305,  305,  271,
      314,  314,  314,  356,  356,  356,  369,  369,  369,  369,
      369,  369,  369,  792,  404,  404,  404,  271,  370,  370,

      370,  370,  370,  370,  370,  404,  404,  415,  415,  415,
      416,  416,  416,  793,  370,  417,  417,  417,  474,  474,
      474,  501,  518,  518,  518,  501,  526,  543,  796,  474,
      474,  797,  370,  518,  518,  798,  543,  799,  543,  543,
      526,  526,  526,  526,  526,  526,  526,  561,  561,  561,
      577,  577,  800,  801,  802,  803,  578,  578,  561,  561,
      804,  561,  805,  806,  577,  577,  577,  577,  577,  577,
      578,  578,  578,  578,  578,  578,  578,  588,  621,  807,
      602,  602,  602,  626,  626,  626,  588,  621,  588,  621,
      577,  602,  602,  773,  626,  626,  635,  707,  808,  809,

      810,  811,  630,  630,  812,  773,  707,  813,  707,  632,
      632,  814,  815,  816,  817,  577,  630,  630,  630,  630,
      630,  630,  630,  632,  632,  632,  632,  632,  632,  634,
      634,  818,  819,  635,  820,  821,  822,  823,  826,  827,
      828,  829,  635,  634,  634,  634,  634,  634,  634,  634,
      666,  685,  685,  635,  830,  831,  832,  686,  686,  666,
      833,  666,  666,  834,  835,  685,  685,  685,  685,  685,
      685,  686,  686,  686,  686,  686,  686,  686,  730,  737,
      737,  838,  839,  840,  842,  739,  739,  730,  843,  730,
      845,  685,  846,  737,  737,  737,  737,  737,  737,  739,

      739,  739,  739,  739,  739,  739,  847,  848,  849,  850,
      851,  853,  854,  855,  856,  857,  685,  858,  861,  862,
      863,  866,  867,  868,  869,  870,  871,  872,  873,  874,
      875,  876,  877,  878,  879,  880,  883,  875,  884,  885,
      888,  889,  890,  891,  892,  893,  894,  895,  896,  897,
      898,  899,  900,  901,  902,  905,  906,  907,  908,  909,
      912,  913,  916,  917,  907,  918,  920,  921,  922,  924,
      925,  926,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  935,  944,  945,  946,  947,  948,
      949,  950,  951,  952,  954,  953,  955,  958,  959,  960,

      961,  952,  953,  963,  966,  967,  968,  906,  971,  970,
      974,  975,  976,  967,  968,  908,  970,  977,  979,  980,
      982,  983,  984,  985,  987,  988,  989,  980,  990,  983,
      993,  994,  934,  995,  996,  998,  990,  999, 1000, 1003,
     1004,  995,  996, 1005, 1006, 1007, 1000, 1004, 1008, 1009,
     1005, 1010, 1011, 1018, 1019,  781,  780,  779,  778, 1010,
     1011,  777,  776,  775,  774,  971,  772,  771,  770,  769,
      768,  767,  766,  765,  764,  763,  762,  982,  761,  760,
      759,  758,  757,  755,  753,  752,  751, 1006, 1007, 1014,
     1014, 1014, 1014, 1014, 1015, 1015, 1015, 1015, 1015, 1016,

     1016, 1016, 1017, 1017, 1017, 1020, 1020, 1021,  750, 1021,
     1021, 1021, 1022, 1022, 1023, 1023,  749,  748,  747,  746,
      745,  744,  742,  741,  740,  733,  732,  729,  728,  727,
      726,  725,  724,  723,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  711,  710,  709,  706,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  696,  695,  694,
      693,  692,  691,  690,  689,  688,  684,  682,  681,  680,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  667,  661,  659,  658,  657,  656,  655,  652,
      651,  650,  649,  648,  647,  646,  645,  644,  643,  642,

      641,  640,  639,  637,  629,  628,  624,  623,  620,  618,
      617,  616,  615,  614,  613,  612,  611,  607,  606,  605,
      603,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  590,  587,  582,  581,  580,  579,  576,  575,
      574,  572,  571,  569,  568,  567,  566,  565,  563,  562,
      560,  559,  558,  557,  556,  554,  553,  552,  551,  549,
      548,  547,  546,  545,  541,  540,  539,  538,  537,  536,
      533,  532,  531,  530,  529,  528,  527,  525,  524,  523,
      522,  521,  520,  519,  517,  516,  513,  508,  507,  505,
      504,  503,  500,  497,  496,  495,  494,  483,  482,  481,

      479,  478,  477,  476,  475,  472,  470,  469,  468,  466,
      465,  463,  462,  460,  459,  458,  457,  456,  454,  453,
      448,  447,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  433,  432,  431,  430,  429,  428,  427,
      426,  424,  423,  422,  421,  420,  419,  418,  414,  410,
      409,  408,  405,  403,  393,  391,  387,  386,  385,  384,
      382,  381,  379,  375,  373,  372,  371,  368,  367,  366,
      365,  364,  363,  362,  357,  355,  354,  353,  352,  351,
      349,  348,  345,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,

      327,  326,  325,  324,  323,  322,  321,  320,  319,  318,
      315,  313,  312,  311,  310,  309,  308,  307,  306,  304,
      300,  298,  297,  296,  295,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  279,  278,  276,  275,  274,  264,
      263,  262,  261,  260,  259,  258,  257,  255,  254,  253,
      252,  251,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  201,  200,  199,

      198,  197,  196,  195,  194,  193,  192,  191,  190,  188,
      187,  186,  185,  183,  182,  181,  180,  179,  178,  176,
      161,  160,  159,  158,  151,  150,  148,  147,  146,  142,
      141,  140,  139,  138,  135,  134,  133,  132,  131,  129,
      128,  126,  124,  123,  122,  120,  119,  118,  116,  115,
      113,  112,  111,  110,  109,  108,  105,  104,  103,  102,
      101,  100,   99,   98,   96,   95,   94,   93,   92,   91,
       90,   88,   87,   83,   79,   52,   38,   32,   22,   18,
       14,   12,   11,    7,    6,    5, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/glsl/glsl_lexer.ll"
#line 2 "src/glsl/glsl_lexer.ll"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include "strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"

#if defined(_MSC_VER)
#	pragma warning(disable: 4065) // warning C4065: switch statement contains 'default' but no 'case' labels
#	pragma warning(disable: 4244) // warning C4244: '=' : conversion from 'double' to 'float', possible loss of data
#	pragma warning(disable: 4267) // warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
#endif // defined(_MSC_VER)

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_USER_ACTION						\
   do {								\
      yylloc->source = 0;					\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylloc->last_line = yylineno + 1;	\
      yycolumn += yyleng;					\
      yylloc->last_column = yycolumn + 1;			\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 * This may happen at different times in desktop GLSL and GLSL ES.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 0, 140, 0, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30 or GLSL ES
 */
#define KEYWORD(reserved_glsl, reserved_glsl_es,			\
                allowed_glsl, allowed_glsl_es, token)			\
   KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                    allowed_glsl, allowed_glsl_es, false, token)

/**
 * Like the KEYWORD macro, but the word is also treated as a keyword
 * if the given boolean expression is true.
 */
#define KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,		\
                         allowed_glsl, allowed_glsl_es,			\
                         alt_expr, token)				\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 return token;							\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 void *mem_ctx = yyextra;					\
	 yylval->identifier = ralloc_strdup(mem_ctx, yytext);		\
	 return classify_identifier(yyextra, yytext);			\
      }									\
   } while (0)

/**
 * A macro for handling keywords that have been present in GLSL since
 * its origin, but were changed into reserved words in GLSL 3.00 ES.
 */
#define DEPRECATED_ES_KEYWORD(token)					\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
         return token;							\
      }									\
   } while (0)

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   const char *digits = text;

   /* Skip "0x" */
   if (base == 16)
      digits += 2;

#ifdef _MSC_VER
   unsigned __int64 value = _strtoui64(digits, NULL, base);
#else
   unsigned long long value = strtoull(digits, NULL, base);
#endif

   lval->n = (int)value;

   if (value > UINT_MAX) {
      /* Note that signed 0xffffffff is valid, not out of range! */
      if (state->is_version(130, 300)) {
	 _mesa_glsl_error(lloc, state,
			  "literal value `%s' out of range", text);
      } else {
	 _mesa_glsl_warning(lloc, state,
			    "literal value `%s' out of range", text);
      }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value.
       * Note that -2147483648 is parsed as -(2147483648), so we don't
       * want to warn for INT_MAX.
       */
      _mesa_glsl_warning(lloc, state,
			 "signed literal value `%s' is interpreted as %d",
			 text, lval->n);
   }
   return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)

#line 1468 "src/glsl/glsl_lexer.cpp"
#line 165 "src/glsl/glsl_lexer.ll"
	/* Note: When adding any start conditions to this list, you must also
	 * update the "Internal compiler error" catch-all rule near the end of
	 * this file. */

#line 1474 "src/glsl/glsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 177 "src/glsl/glsl_lexer.ll"


#line 1754 "src/glsl/glsl_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1014 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1013 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 179 "src/glsl/glsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 182 "src/glsl/glsl_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 183 "src/glsl/glsl_lexer.ll"
{ BEGIN PP; return VERSION_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 184 "src/glsl/glsl_lexer.ll"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 185 "src/glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;
				   yylloc->source = strtol(ptr, NULL, 0);
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 200 "src/glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 214 "src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 218 "src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 222 "src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 226 "src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 230 "src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 234 "src/glsl/glsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 236 "src/glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 237 "src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 239 "src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 240 "src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 241 "src/glsl/glsl_lexer.ll"
return COLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 242 "src/glsl/glsl_lexer.ll"
{
				   void *mem_ctx = yyextra;
				   yylval->identifier = ralloc_strdup(mem_ctx, yytext);
				   return IDENTIFIER;
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 247 "src/glsl/glsl_lexer.ll"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 251 "src/glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 252 "src/glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 254 "src/glsl/glsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 256 "src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(ATTRIBUTE);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 257 "src/glsl/glsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 258 "src/glsl/glsl_lexer.ll"
return BOOL_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 259 "src/glsl/glsl_lexer.ll"
return FLOAT_TOK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 260 "src/glsl/glsl_lexer.ll"
return INT_TOK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 261 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UINT_TOK);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 263 "src/glsl/glsl_lexer.ll"
return BREAK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 264 "src/glsl/glsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 265 "src/glsl/glsl_lexer.ll"
return DO;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 266 "src/glsl/glsl_lexer.ll"
return WHILE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 267 "src/glsl/glsl_lexer.ll"
return ELSE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 268 "src/glsl/glsl_lexer.ll"
return FOR;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 269 "src/glsl/glsl_lexer.ll"
return IF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 270 "src/glsl/glsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 271 "src/glsl/glsl_lexer.ll"
return RETURN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 273 "src/glsl/glsl_lexer.ll"
return BVEC2;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 274 "src/glsl/glsl_lexer.ll"
return BVEC3;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 275 "src/glsl/glsl_lexer.ll"
return BVEC4;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 276 "src/glsl/glsl_lexer.ll"
return IVEC2;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 277 "src/glsl/glsl_lexer.ll"
return IVEC3;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 278 "src/glsl/glsl_lexer.ll"
return IVEC4;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 279 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC2);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 280 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC3);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 281 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC4);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 282 "src/glsl/glsl_lexer.ll"
return VEC2;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 283 "src/glsl/glsl_lexer.ll"
return VEC3;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 284 "src/glsl/glsl_lexer.ll"
return VEC4;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 285 "src/glsl/glsl_lexer.ll"
return MAT2X2;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 286 "src/glsl/glsl_lexer.ll"
return MAT3X3;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 287 "src/glsl/glsl_lexer.ll"
return MAT4X4;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 288 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X2);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 289 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X3);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 290 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X4);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 291 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X2);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 292 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X3);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 293 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X4);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 294 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X2);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 295 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X3);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 296 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X4);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 298 "src/glsl/glsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 299 "src/glsl/glsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 300 "src/glsl/glsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 301 "src/glsl/glsl_lexer.ll"
return BUFFER;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 302 "src/glsl/glsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 303 "src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(VARYING);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 304 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, CENTROID);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 305 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 120, 100, INVARIANT);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 306 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 100, 130, 300, FLAT);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 307 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SMOOTH);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 308 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, NOPERSPECTIVE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 310 "src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1D);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 311 "src/glsl/glsl_lexer.ll"
return SAMPLER2D;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 312 "src/glsl/glsl_lexer.ll"
return SAMPLER3D;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 313 "src/glsl/glsl_lexer.ll"
return SAMPLERCUBE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 314 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAY);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 315 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAY);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 316 "src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1DSHADOW);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 317 "src/glsl/glsl_lexer.ll"
return SAMPLER2DSHADOW;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 318 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLERCUBESHADOW);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 319 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAYSHADOW);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 320 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAYSHADOW);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 321 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1D);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 322 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2D);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 323 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER3D);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 324 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLERCUBE);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 325 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1DARRAY);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 326 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2DARRAY);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 327 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1D);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 328 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2D);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 329 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER3D);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 330 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLERCUBE);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 331 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1DARRAY);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 332 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2DARRAY);
	YY_BREAK
/* additional keywords in ARB_texture_multisample, included in GLSL 1.50 */
/* these are reserved but not defined in GLSL 3.00 */
case 96:
YY_RULE_SETUP
#line 336 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMS);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 337 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMS);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 338 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMS);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 339 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMSARRAY);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 340 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMSARRAY);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 341 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMSARRAY);
	YY_BREAK
/* keywords available with ARB_texture_cube_map_array_enable extension on desktop GLSL */
case 102:
YY_RULE_SETUP
#line 344 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 310, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAY);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 345 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 310, yyextra->ARB_texture_cube_map_array_enable, ISAMPLERCUBEARRAY);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 346 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 310, yyextra->ARB_texture_cube_map_array_enable, USAMPLERCUBEARRAY);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 347 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 310, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAYSHADOW);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 349 "src/glsl/glsl_lexer.ll"
{
			  if (yyextra->OES_EGL_image_external_enable)
			     return SAMPLEREXTERNALOES;
			  else
			     return IDENTIFIER;
		}
	YY_BREAK
/* keywords available with ARB_gpu_shader5 */
case 107:
YY_RULE_SETUP
#line 357 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_gpu_shader5_enable, PRECISE);
	YY_BREAK
/* keywords available with ARB_shader_image_load_store */
case 108:
YY_RULE_SETUP
#line 360 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE1D);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 361 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2D);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 362 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE3D);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 363 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2DRECT);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 364 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGECUBE);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 365 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGEBUFFER);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 366 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE1DARRAY);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 367 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2DARRAY);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 368 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGECUBEARRAY);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 369 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMS);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 370 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMSARRAY);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 371 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE1D);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 372 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2D);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 373 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE3D);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 374 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DRECT);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 375 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBE);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 376 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGEBUFFER);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 377 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE1DARRAY);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 378 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DARRAY);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 379 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBEARRAY);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 380 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMS);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 381 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMSARRAY);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 382 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE1D);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 383 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2D);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 384 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE3D);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 385 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DRECT);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 386 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBE);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 387 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGEBUFFER);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 388 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE1DARRAY);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 389 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DARRAY);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 390 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBEARRAY);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 391 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMS);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 392 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMSARRAY);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 393 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DSHADOW);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 394 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DSHADOW);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 395 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 396 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 398 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, COHERENT);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 399 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 420, 0, yyextra->ARB_shader_image_load_store_enable, VOLATILE);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 400 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, RESTRICT);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 401 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, READONLY);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 402 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, WRITEONLY);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 404 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_atomic_counters_enable, ATOMIC_UINT);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 406 "src/glsl/glsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 407 "src/glsl/glsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 409 "src/glsl/glsl_lexer.ll"
{
		  if ((yyextra->is_version(140, 300))
		      || yyextra->AMD_conservative_depth_enable
		      || yyextra->ARB_conservative_depth_enable
		      || yyextra->ARB_explicit_attrib_location_enable
		      || yyextra->ARB_explicit_uniform_location_enable
                      || yyextra->has_separate_shader_objects()
		      || yyextra->ARB_uniform_buffer_object_enable
		      || yyextra->ARB_fragment_coord_conventions_enable
                      || yyextra->ARB_shading_language_420pack_enable
                      || yyextra->ARB_compute_shader_enable) {
		      return LAYOUT_TOK;
		   } else {
		      void *mem_ctx = yyextra;
		      yylval->identifier = ralloc_strdup(mem_ctx, yytext);
		      return classify_identifier(yyextra, yytext);
		   }
		}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 428 "src/glsl/glsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 429 "src/glsl/glsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 430 "src/glsl/glsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 431 "src/glsl/glsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 432 "src/glsl/glsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 433 "src/glsl/glsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 434 "src/glsl/glsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 435 "src/glsl/glsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 436 "src/glsl/glsl_lexer.ll"
return XOR_OP;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 437 "src/glsl/glsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 438 "src/glsl/glsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 440 "src/glsl/glsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 441 "src/glsl/glsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 442 "src/glsl/glsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 443 "src/glsl/glsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 444 "src/glsl/glsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 445 "src/glsl/glsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 446 "src/glsl/glsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 447 "src/glsl/glsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 448 "src/glsl/glsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 449 "src/glsl/glsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 451 "src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 454 "src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 457 "src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 461 "src/glsl/glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 465 "src/glsl/glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 469 "src/glsl/glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 473 "src/glsl/glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 477 "src/glsl/glsl_lexer.ll"
{
			    yylval->real = glsl_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 482 "src/glsl/glsl_lexer.ll"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 486 "src/glsl/glsl_lexer.ll"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 185:
YY_RULE_SETUP
#line 493 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ASM);
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 494 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CLASS);
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 495 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNION);
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 496 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ENUM);
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 497 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TYPEDEF);
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 498 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TEMPLATE);
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 499 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, THIS);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 500 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 140, 300, yyextra->ARB_uniform_buffer_object_enable, PACKED_TOK);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 501 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, GOTO);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 502 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, SWITCH);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 503 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, DEFAULT);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 504 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INLINE_TOK);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 505 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NOINLINE);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 506 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, PUBLIC_TOK);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 507 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, STATIC);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 508 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERN);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 509 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERNAL);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 510 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INTERFACE);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 511 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, LONG_TOK);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 512 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SHORT_TOK);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 513 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 400, 0, DOUBLE_TOK);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 514 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HALF);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 515 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FIXED_TOK);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 516 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNSIGNED);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 517 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INPUT_TOK);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 518 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, OUTPUT);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 519 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC2);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 520 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC3);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 521 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC4);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 522 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 400, 0, DVEC2);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 523 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 400, 0, DVEC3);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 524 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 400, 0, DVEC4);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 525 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC2);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 526 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC3);
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 527 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC4);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 528 "src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECT);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 529 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SAMPLER3DRECT);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 530 "src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECTSHADOW);
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 531 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SIZEOF);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 532 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CAST);
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 533 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NAMESPACE);
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 534 "src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 227:
YY_RULE_SETUP
#line 537 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, LOWP);
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 538 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, MEDIUMP);
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 539 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, HIGHP);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 540 "src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 231:
YY_RULE_SETUP
#line 543 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, CASE);
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 544 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, COMMON);
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 545 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, PARTITION);
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 546 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, ACTIVE);
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 547 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 100, 0, 0, SUPERP);
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 548 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 140, 0, SAMPLERBUFFER);
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 549 "src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, FILTER);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 550 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 0, 140, 0, yyextra->ARB_uniform_buffer_object_enable && !yyextra->es_shader, ROW_MAJOR);
	YY_BREAK
/* Additional reserved words in GLSL 1.40 */
case 239:
YY_RULE_SETUP
#line 553 "src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLER2DRECT);
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 554 "src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLER2DRECT);
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 555 "src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLERBUFFER);
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 556 "src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLERBUFFER);
	YY_BREAK
/* Additional reserved words in GLSL ES 3.00 */
case 243:
YY_RULE_SETUP
#line 559 "src/glsl/glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, RESOURCE);
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 560 "src/glsl/glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, PATCH);
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 561 "src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 0, yyextra->ARB_gpu_shader5_enable, SAMPLE);
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 562 "src/glsl/glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, SUBROUTINE);
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 565 "src/glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    void *ctx = state;	
			    yylval->identifier = ralloc_strdup(ctx, yytext);
			    return classify_identifier(state, yytext);
			}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 572 "src/glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 574 "src/glsl/glsl_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3179 "src/glsl/glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1014 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1014 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1013);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 574 "src/glsl/glsl_lexer.ll"


int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name)
{
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TYPE_IDENTIFIER;
   else
      return NEW_IDENTIFIER;
}

void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   yylex_init_extra(state, & state->scanner);
   yy_scan_string(string, state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   yylex_destroy(state->scanner);
}

